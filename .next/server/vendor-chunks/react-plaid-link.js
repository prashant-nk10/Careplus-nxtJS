"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-plaid-link";
exports.ids = ["vendor-chunks/react-plaid-link"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-plaid-link/dist/index.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-plaid-link/dist/index.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PlaidEmbeddedLink: () => (/* binding */ PlaidEmbeddedLink),\n/* harmony export */   PlaidLink: () => (/* binding */ PlaidLink),\n/* harmony export */   PlaidLinkStableEvent: () => (/* binding */ PlaidLinkStableEvent),\n/* harmony export */   usePlaidLink: () => (/* binding */ usePlaidLink)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction unwrapExports (x) {\n\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar useScript_1 = createCommonjsModule(function (module, exports) {\n\nvar __rest = commonjsGlobal && commonjsGlobal.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scripts = void 0;\n\n // Previously loading/loaded scripts and their current status\n\n\nexports.scripts = {}; // Check for existing <script> tags with this src. If so, update scripts[src]\n// and return the new status; otherwise, return undefined.\n\nvar checkExisting = function (src) {\n  var existing = document.querySelector(\"script[src=\\\"\" + src + \"\\\"]\");\n\n  if (existing) {\n    // Assume existing <script> tag is already loaded,\n    // and cache that data for future use.\n    return exports.scripts[src] = {\n      loading: false,\n      error: null,\n      scriptEl: existing\n    };\n  }\n\n  return undefined;\n};\n\nfunction useScript(_a) {\n  var src = _a.src,\n      _b = _a.checkForExisting,\n      checkForExisting = _b === void 0 ? false : _b,\n      attributes = __rest(_a, [\"src\", \"checkForExisting\"]); // Check whether some instance of this hook considered this src.\n\n\n  var status = src ? exports.scripts[src] : undefined; // If requested, check for existing <script> tags with this src\n  // (unless we've already loaded the script ourselves).\n\n  if (!status && checkForExisting && src && isBrowser) {\n    status = checkExisting(src);\n  }\n\n  var _c = (0, (react__WEBPACK_IMPORTED_MODULE_0___default().useState))(status ? status.loading : Boolean(src)),\n      loading = _c[0],\n      setLoading = _c[1];\n\n  var _d = (0, (react__WEBPACK_IMPORTED_MODULE_0___default().useState))(status ? status.error : null),\n      error = _d[0],\n      setError = _d[1];\n\n  (0, (react__WEBPACK_IMPORTED_MODULE_0___default().useEffect))(function () {\n    // Nothing to do on server, or if no src specified, or\n    // if loading has already resolved to \"loaded\" or \"error\" state.\n    if (!isBrowser || !src || !loading || error) return; // Check again for existing <script> tags with this src\n    // in case it's changed since mount.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n    status = exports.scripts[src];\n\n    if (!status && checkForExisting) {\n      status = checkExisting(src);\n    } // Determine or create <script> element to listen to.\n\n\n    var scriptEl;\n\n    if (status) {\n      scriptEl = status.scriptEl;\n    } else {\n      scriptEl = document.createElement('script');\n      scriptEl.src = src;\n      Object.keys(attributes).forEach(function (key) {\n        if (scriptEl[key] === undefined) {\n          scriptEl.setAttribute(key, attributes[key]);\n        } else {\n          scriptEl[key] = attributes[key];\n        }\n      });\n      status = exports.scripts[src] = {\n        loading: true,\n        error: null,\n        scriptEl: scriptEl\n      };\n    } // `status` is now guaranteed to be defined: either the old status\n    // from a previous load, or a newly created one.\n\n\n    var handleLoad = function () {\n      if (status) status.loading = false;\n      setLoading(false);\n    };\n\n    var handleError = function (error) {\n      if (status) status.error = error;\n      setError(error);\n    };\n\n    scriptEl.addEventListener('load', handleLoad);\n    scriptEl.addEventListener('error', handleError);\n    document.body.appendChild(scriptEl);\n    return function () {\n      scriptEl.removeEventListener('load', handleLoad);\n      scriptEl.removeEventListener('error', handleError);\n    }; // we need to ignore the attributes as they're a new object per call, so we'd never skip an effect call\n  }, [src]);\n  return [loading, error];\n}\n\nexports.default = useScript;\nvar isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\n});\n\nunwrapExports(useScript_1);\nvar useScript_2 = useScript_1.scripts;\n\nvar lib = createCommonjsModule(function (module, exports) {\n\nvar __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.scripts = exports.default = void 0;\n\n\n\nObject.defineProperty(exports, \"default\", {\n  enumerable: true,\n  get: function () {\n    return __importDefault(useScript_1).default;\n  }\n});\nObject.defineProperty(exports, \"scripts\", {\n  enumerable: true,\n  get: function () {\n    return useScript_1.scripts;\n  }\n});\n});\n\nvar useScript = unwrapExports(lib);\nvar lib_1 = lib.scripts;\n\nvar renameKeyInObject = function renameKeyInObject(o, oldKey, newKey) {\n  var newObject = {};\n  delete Object.assign(newObject, o, _defineProperty({}, newKey, o[oldKey]))[oldKey];\n  return newObject;\n};\n/**\n * Wrap link handler creation and instance to clean up iframe via destroy() method\n */\n\n\nvar createPlaidHandler = function createPlaidHandler(config, creator) {\n  var state = {\n    plaid: null,\n    open: false,\n    onExitCallback: null\n  }; // If Plaid is not available, throw an Error\n\n  if (typeof window === 'undefined' || !window.Plaid) {\n    throw new Error('Plaid not loaded');\n  }\n\n  state.plaid = creator(_objectSpread2(_objectSpread2({}, config), {}, {\n    onExit: function onExit(error, metadata) {\n      state.open = false;\n      config.onExit && config.onExit(error, metadata);\n      state.onExitCallback && state.onExitCallback();\n    }\n  }));\n\n  var open = function open() {\n    if (!state.plaid) {\n      return;\n    }\n\n    state.open = true;\n    state.onExitCallback = null;\n    state.plaid.open();\n  };\n\n  var submit = function submit(data) {\n    if (!state.plaid) {\n      return;\n    }\n\n    state.plaid.submit(data);\n  };\n\n  var exit = function exit(exitOptions, callback) {\n    if (!state.open || !state.plaid) {\n      callback && callback();\n      return;\n    }\n\n    state.onExitCallback = callback;\n    state.plaid.exit(exitOptions);\n\n    if (exitOptions && exitOptions.force) {\n      state.open = false;\n    }\n  };\n\n  var destroy = function destroy() {\n    if (!state.plaid) {\n      return;\n    }\n\n    state.plaid.destroy();\n    state.plaid = null;\n  };\n\n  return {\n    open: open,\n    submit: submit,\n    exit: exit,\n    destroy: destroy\n  };\n};\nvar createPlaid = function createPlaid(options, creator) {\n  var config = renameKeyInObject(options, 'publicKey', 'key');\n  return createPlaidHandler(config, creator);\n};\n\nvar PLAID_LINK_STABLE_URL = 'https://cdn.plaid.com/link/v2/stable/link-initialize.js';\n\nvar noop = function noop() {};\n/**\n * This hook loads Plaid script and manages the Plaid Link creation for you.\n * You get easy open & exit methods to call and loading & error states.\n *\n * This will destroy the Plaid UI on un-mounting so it's up to you to be\n * graceful to the user.\n *\n * A new Plaid instance is created every time the token and products options change.\n * It's up to you to prevent unnecessary re-creations on re-render.\n */\n\n\nvar usePlaidLink = function usePlaidLink(options) {\n  // Asynchronously load the plaid/link/stable url into the DOM\n  var _useScript = useScript({\n    src: PLAID_LINK_STABLE_URL,\n    checkForExisting: true\n  }),\n      _useScript2 = _slicedToArray(_useScript, 2),\n      loading = _useScript2[0],\n      error = _useScript2[1]; // internal state\n\n\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      plaid = _useState2[0],\n      setPlaid = _useState2[1];\n\n  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      iframeLoaded = _useState4[0],\n      setIframeLoaded = _useState4[1];\n\n  var products = (options.product || []).slice().sort().join(',');\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    // If the link.js script is still loading, return prematurely\n    if (loading) {\n      return;\n    } // If the token, publicKey, and received redirect URI are undefined, return prematurely\n\n\n    if (!options.token && !options.publicKey && !options.receivedRedirectUri) {\n      return;\n    }\n\n    if (error || !window.Plaid) {\n      // eslint-disable-next-line no-console\n      console.error('Error loading Plaid', error);\n      return;\n    } // if an old plaid instance exists, destroy it before\n    // creating a new one\n\n\n    if (plaid != null) {\n      plaid.exit({\n        force: true\n      }, function () {\n        return plaid.destroy();\n      });\n    }\n\n    var next = createPlaid(_objectSpread2(_objectSpread2({}, options), {}, {\n      onLoad: function onLoad() {\n        setIframeLoaded(true);\n        options.onLoad && options.onLoad();\n      }\n    }), window.Plaid.create);\n    setPlaid(next); // destroy the Plaid iframe factory\n\n    return function () {\n      return next.exit({\n        force: true\n      }, function () {\n        return next.destroy();\n      });\n    };\n  }, [loading, error, options.publicKey, options.token, products]);\n  var ready = plaid != null && (!loading || iframeLoaded);\n\n  var openNoOp = function openNoOp() {\n    if (!options.token) {\n      console.warn('react-plaid-link: You cannot call open() without a valid token supplied to usePlaidLink. This is a no-op.');\n    }\n  };\n\n  return {\n    error: error,\n    ready: ready,\n    submit: plaid ? plaid.submit : noop,\n    exit: plaid ? plaid.exit : noop,\n    open: plaid ? plaid.open : openNoOp\n  };\n};\n\nvar _excluded = [\"children\", \"style\", \"className\"];\nvar PlaidLink = function PlaidLink(props) {\n  var children = props.children,\n      style = props.style,\n      className = props.className,\n      config = _objectWithoutProperties(props, _excluded);\n\n  var _usePlaidLink = usePlaidLink(_objectSpread2({}, config)),\n      error = _usePlaidLink.error,\n      open = _usePlaidLink.open;\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n    disabled: Boolean(error),\n    type: \"button\",\n    className: className,\n    style: _objectSpread2({\n      padding: '6px 4px',\n      outline: 'none',\n      background: '#FFFFFF',\n      border: '2px solid #F1F1F1',\n      borderRadius: '4px'\n    }, style),\n    onClick: function onClick() {\n      return open();\n    }\n  }, children);\n};\nPlaidLink.displayName = 'PlaidLink';\n\nvar PlaidEmbeddedLink = function PlaidEmbeddedLink(props) {\n  var style = props.style,\n      className = props.className,\n      onSuccess = props.onSuccess,\n      onExit = props.onExit,\n      onLoad = props.onLoad,\n      onEvent = props.onEvent,\n      token = props.token,\n      receivedRedirectUri = props.receivedRedirectUri;\n  var config = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n    return {\n      onSuccess: onSuccess,\n      onExit: onExit,\n      onLoad: onLoad,\n      onEvent: onEvent,\n      token: token,\n      receivedRedirectUri: receivedRedirectUri\n    };\n  }, [onSuccess, onExit, onLoad, onEvent, token, receivedRedirectUri]); // Asynchronously load the plaid/link/stable url into the DOM\n\n  var _useScript = useScript({\n    src: PLAID_LINK_STABLE_URL,\n    checkForExisting: true\n  }),\n      _useScript2 = _slicedToArray(_useScript, 2),\n      loading = _useScript2[0],\n      error = _useScript2[1];\n\n  var embeddedLinkTarget = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n    // If the external link JS script is still loading, return prematurely\n    if (loading) {\n      return;\n    }\n\n    if (error || !window.Plaid) {\n      // eslint-disable-next-line no-console\n      console.error('Error loading Plaid', error);\n      return;\n    }\n\n    if (config.token == null || config.token == '') {\n      console.error('A token is required to initialize embedded Plaid Link');\n      return;\n    } // The embedded Link interface doesn't use the `usePlaidLink` hook to manage\n    // its Plaid Link instance because the embedded Link integration in link-initialize\n    // maintains its own handler internally.\n\n\n    var _window$Plaid$createE = window.Plaid.createEmbedded(_objectSpread2({}, config), embeddedLinkTarget.current),\n        destroy = _window$Plaid$createE.destroy; // Clean up embedded Link component on unmount\n\n\n    return function () {\n      destroy();\n    };\n  }, [loading, error, config, embeddedLinkTarget]);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n    style: style,\n    className: className,\n    ref: embeddedLinkTarget\n  });\n};\n\n// The following event names are stable and will not be deprecated or changed\nvar PlaidLinkStableEvent;\n\n(function (PlaidLinkStableEvent) {\n  PlaidLinkStableEvent[\"OPEN\"] = \"OPEN\";\n  PlaidLinkStableEvent[\"EXIT\"] = \"EXIT\";\n  PlaidLinkStableEvent[\"HANDOFF\"] = \"HANDOFF\";\n  PlaidLinkStableEvent[\"SELECT_INSTITUTION\"] = \"SELECT_INSTITUTION\";\n  PlaidLinkStableEvent[\"ERROR\"] = \"ERROR\";\n  PlaidLinkStableEvent[\"BANK_INCOME_INSIGHTS_COMPLETED\"] = \"BANK_INCOME_INSIGHTS_COMPLETED\";\n  PlaidLinkStableEvent[\"IDENTITY_VERIFICATION_PASS_SESSION\"] = \"IDENTITY_VERIFICATION_PASS_SESSION\";\n  PlaidLinkStableEvent[\"IDENTITY_VERIFICATION_FAIL_SESSION\"] = \"IDENTITY_VERIFICATION_FAIL_SESSION\";\n})(PlaidLinkStableEvent || (PlaidLinkStableEvent = {}));\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-plaid-link/dist/index.esm.js\n");

/***/ })

};
;